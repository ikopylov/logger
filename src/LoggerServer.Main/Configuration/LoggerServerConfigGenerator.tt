<#@ template  debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Runtime.Remoting.Messaging" #>

<#@ include file="Helpers\MultiOutput.ttinclude" #>
<#@ include file="Helpers\ConfigCommonData.ttinclude" #>
<#@ include file="Helpers\XmlBasedConfigSampleFileGenerator.ttinclude" #>
<#@ include file="Helpers\ConfigLoaderGenerator.ttinclude" #>
<#@ include file="Helpers\ConfigSchemaGenerator.ttinclude" #>


<#
	 
	// Определяем, какой интерфейс будет парситься. Сам интерфейс объявляется в самом конце файла
	Type RootInterface = typeof(ILoggerServerConfiguration);
	// Пространство имён, в котором будут расположены все объекты
	string NamespaceName = "LoggerServer.Main.Configuration";
	// Имя сборки, в которой будет находится сгенерированный файл кода
	string AssemblyName = "LoggerServer.Main";
	// Помещать ли интерфейсы в сгенерированный файл (если они объявлены вне, то надо отключить)
	bool GenerateInterfaces = true;
	// Для смены имени секции нужно задать значение
	string OverridedSectionName = null;

#>


<#   
	AppConfigGenerationParams Params = new AppConfigGenerationParams();
	Params.NamespaceName = NamespaceName;
	Params.AssemblyName = AssemblyName;
	Params.GenerateInterface = GenerateInterfaces;
	Params.SectionName = OverridedSectionName;

	if (Params.SectionName == null)
    {
		Params.SectionName = NameResolveHelper.GetSectionNameByIntName(RootInterface);
    }

	this.GenerationEnvironment = new StringBuilder();
	  
	GenerateSampleConfigFileXmlBased(RootInterface, Params);
	SaveOutput(RootInterface.Name + "_SampleAppConfig.config");

	GenerateConfigXSD(RootInterface, Params);
	SaveOutput(RootInterface.Name + "_AppConfigSchema.xsd");

	GenerateConfigLoader(RootInterface, Params);
	SaveOutput(RootInterface.Name + "_AppConfigLoader.cs");

    DeleteOldOutputs();
#>


<#+
// ==================================================================
// ================== ЗДЕСЬ ОБЪЯВЛЯЮТСЯ ИНТЕРФЕЙСЫ ==================
// ==================================================================
	
    /// <summary>
    /// Конфиг для LoggerServer
    /// </summary>
    public interface ILoggerServerConfiguration
    {
		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlElement)]
        ITcpServerConfig TcpServerConfig { get; }

		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlElement)]
        IPipeServerConfig PipeServerConfig { get; }
    }



	public interface ITcpServerConfig
    {
		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute, IsRequired=false, DefaultValue="true")]
		bool IsEnabled {get;}

		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute)]
		int Port {get;}

		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute, IsRequired=false, DefaultValue="LoggerService")]
		string ServiceName {get;}
    }


	public interface IPipeServerConfig
    {
		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute, IsRequired=false, DefaultValue="true")]
		bool IsEnabled {get;}

		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute)]
		string PipeName {get;}

		[ConfigPropertyDescriptionAttribute(ConfigPropertyStyle.XmlAttribute, IsRequired=false, DefaultValue="LoggerService")]
		string ServiceName {get;}
    }
	
#>

