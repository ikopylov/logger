//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoggerConfig
{
    
    
    /// <summary>
    /// The LogProperties Configuration Section.
    /// </summary>
    internal partial class LogProperties : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the LogProperties Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LogPropertiesSectionName = "logProperties";
        
        /// <summary>
        /// Gets the LogProperties instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::LoggerConfig.LogProperties Instance
        {
            get
            {
                return ((global::LoggerConfig.LogProperties)(global::System.Configuration.ConfigurationManager.GetSection(global::LoggerConfig.LogProperties.LogPropertiesSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.LogProperties.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::LoggerConfig.LogProperties.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region IsEnable Property
        /// <summary>
        /// The XML name of the <see cref="IsEnable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IsEnablePropertyName = "isEnable";
        
        /// <summary>
        /// Gets or sets the IsEnable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsEnable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.LogProperties.IsEnablePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool IsEnable
        {
            get
            {
                return ((bool)(base[global::LoggerConfig.LogProperties.IsEnablePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.LogProperties.IsEnablePropertyName] = value;
            }
        }
        #endregion
        
        #region LoggerConfigurations Property
        /// <summary>
        /// The XML name of the <see cref="LoggerConfigurations"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerConfigurationsPropertyName = "loggerConfigurations";
        
        /// <summary>
        /// Gets or sets the LoggerConfigurations.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LoggerConfigurations.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.LogProperties.LoggerConfigurationsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.LoggerConfigurations LoggerConfigurations
        {
            get
            {
                return ((global::LoggerConfig.LoggerConfigurations)(base[global::LoggerConfig.LogProperties.LoggerConfigurationsPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.LogProperties.LoggerConfigurationsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The ConsoleLogger Configuration Element.
    /// </summary>
    internal partial class ConsoleLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Template Property
        /// <summary>
        /// The XML name of the <see cref="Template"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TemplatePropertyName = "template";
        
        /// <summary>
        /// Gets or sets the Template.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Template.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.ConsoleLogger.TemplatePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Template
        {
            get
            {
                return ((string)(base[global::LoggerConfig.ConsoleLogger.TemplatePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.ConsoleLogger.TemplatePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The FileLogger Configuration Element.
    /// </summary>
    internal partial class FileLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Filename Property
        /// <summary>
        /// The XML name of the <see cref="Filename"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FilenamePropertyName = "filename";
        
        /// <summary>
        /// Gets or sets the Filename.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Filename.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.FileLogger.FilenamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Filename
        {
            get
            {
                return ((string)(base[global::LoggerConfig.FileLogger.FilenamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.FileLogger.FilenamePropertyName] = value;
            }
        }
        #endregion
        
        #region Template Property
        /// <summary>
        /// The XML name of the <see cref="Template"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TemplatePropertyName = "template";
        
        /// <summary>
        /// Gets or sets the Template.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Template.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.FileLogger.TemplatePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Template
        {
            get
            {
                return ((string)(base[global::LoggerConfig.FileLogger.TemplatePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.FileLogger.TemplatePropertyName] = value;
            }
        }
        #endregion
        
        #region IsNeedRotate Property
        /// <summary>
        /// The XML name of the <see cref="IsNeedRotate"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IsNeedRotatePropertyName = "isNeedRotate";
        
        /// <summary>
        /// Gets or sets the IsNeedRotate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsNeedRotate.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.FileLogger.IsNeedRotatePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool IsNeedRotate
        {
            get
            {
                return ((bool)(base[global::LoggerConfig.FileLogger.IsNeedRotatePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.FileLogger.IsNeedRotatePropertyName] = value;
            }
        }
        #endregion
        
        #region Encoding Property
        /// <summary>
        /// The XML name of the <see cref="Encoding"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EncodingPropertyName = "encoding";
        
        /// <summary>
        /// Gets or sets the Encoding.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Encoding.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.FileLogger.EncodingPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="utf-8")]
        public virtual string Encoding
        {
            get
            {
                return ((string)(base[global::LoggerConfig.FileLogger.EncodingPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.FileLogger.EncodingPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The DBLogger Configuration Element.
    /// </summary>
    internal partial class DBLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectionStringPropertyName = "connectionString";
        
        /// <summary>
        /// Gets or sets the ConnectionString.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionString.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.DBLogger.ConnectionStringPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[global::LoggerConfig.DBLogger.ConnectionStringPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.DBLogger.ConnectionStringPropertyName] = value;
            }
        }
        #endregion
        
        #region StoreProcedureName Property
        /// <summary>
        /// The XML name of the <see cref="StoreProcedureName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StoreProcedureNamePropertyName = "storeProcedureName";
        
        /// <summary>
        /// Gets or sets the StoreProcedureName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The StoreProcedureName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.DBLogger.StoreProcedureNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="LogInsert")]
        public virtual string StoreProcedureName
        {
            get
            {
                return ((string)(base[global::LoggerConfig.DBLogger.StoreProcedureNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.DBLogger.StoreProcedureNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The PipeLogger Configuration Element.
    /// </summary>
    internal partial class PipeLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ServerName Property
        /// <summary>
        /// The XML name of the <see cref="ServerName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerNamePropertyName = "serverName";
        
        /// <summary>
        /// Gets or sets the ServerName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ServerName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.PipeLogger.ServerNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ServerName
        {
            get
            {
                return ((string)(base[global::LoggerConfig.PipeLogger.ServerNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.PipeLogger.ServerNamePropertyName] = value;
            }
        }
        #endregion
        
        #region PipeName Property
        /// <summary>
        /// The XML name of the <see cref="PipeName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PipeNamePropertyName = "pipeName";
        
        /// <summary>
        /// Gets or sets the PipeName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PipeName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.PipeLogger.PipeNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string PipeName
        {
            get
            {
                return ((string)(base[global::LoggerConfig.PipeLogger.PipeNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.PipeLogger.PipeNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The NetLogger Configuration Element.
    /// </summary>
    internal partial class NetLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ServerName Property
        /// <summary>
        /// The XML name of the <see cref="ServerName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerNamePropertyName = "serverName";
        
        /// <summary>
        /// Gets or sets the ServerName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ServerName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.NetLogger.ServerNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ServerName
        {
            get
            {
                return ((string)(base[global::LoggerConfig.NetLogger.ServerNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.NetLogger.ServerNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.NetLogger.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::LoggerConfig.NetLogger.PortPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.NetLogger.PortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The RoutingLogger Configuration Element.
    /// </summary>
    internal partial class RoutingLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region BindingByModuleName Property
        /// <summary>
        /// The XML name of the <see cref="BindingByModuleName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BindingByModuleNamePropertyName = "bindingByModuleName";
        
        /// <summary>
        /// Gets or sets the BindingByModuleName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The BindingByModuleName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.RoutingLogger.BindingByModuleNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.BindingByModuleName BindingByModuleName
        {
            get
            {
                return ((global::LoggerConfig.BindingByModuleName)(base[global::LoggerConfig.RoutingLogger.BindingByModuleNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.RoutingLogger.BindingByModuleNamePropertyName] = value;
            }
        }
        #endregion
        
        #region FromAll Property
        /// <summary>
        /// The XML name of the <see cref="FromAll"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FromAllPropertyName = "fromAll";
        
        /// <summary>
        /// Gets or sets the FromAll.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FromAll.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.RoutingLogger.FromAllPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.FromAll FromAll
        {
            get
            {
                return ((global::LoggerConfig.FromAll)(base[global::LoggerConfig.RoutingLogger.FromAllPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.RoutingLogger.FromAllPropertyName] = value;
            }
        }
        #endregion
        
        #region FromOthers Property
        /// <summary>
        /// The XML name of the <see cref="FromOthers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FromOthersPropertyName = "fromOthers";
        
        /// <summary>
        /// Gets or sets the FromOthers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FromOthers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.RoutingLogger.FromOthersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.FromOthers FromOthers
        {
            get
            {
                return ((global::LoggerConfig.FromOthers)(base[global::LoggerConfig.RoutingLogger.FromOthersPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.RoutingLogger.FromOthersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of LoggerConfigurationBase instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.LoggerConfigurationBase), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.LoggerConfigurations.LoggerConfigurationBasePropertyName)]
    internal partial class LoggerConfigurations : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.LoggerConfigurationBase"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerConfigurationBasePropertyName = "loggerConfigurationBase";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.LoggerConfigurations.LoggerConfigurationBasePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.LoggerConfigurations.LoggerConfigurationBasePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.LoggerConfigurationBase)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.LoggerConfigurationBase"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.LoggerConfigurationBase"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.LoggerConfigurationBase();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.LoggerConfigurationBase this[int index]
        {
            get
            {
                return ((global::LoggerConfig.LoggerConfigurationBase)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.LoggerConfigurationBase this[object name]
        {
            get
            {
                return ((global::LoggerConfig.LoggerConfigurationBase)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="loggerConfigurationBase">The <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.LoggerConfigurationBase loggerConfigurationBase)
        {
            base.BaseAdd(loggerConfigurationBase);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.LoggerConfigurationBase"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="loggerConfigurationBase">The <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.LoggerConfigurationBase loggerConfigurationBase)
        {
            base.BaseRemove(this.GetElementKey(loggerConfigurationBase));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.LoggerConfigurationBase GetItemAt(int index)
        {
            return ((global::LoggerConfig.LoggerConfigurationBase)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.LoggerConfigurationBase"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.LoggerConfigurationBase GetItemByKey(string name)
        {
            return ((global::LoggerConfig.LoggerConfigurationBase)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of Module instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.Module), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.BindingByModuleName.ModulePropertyName)]
    internal partial class BindingByModuleName : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.Module"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ModulePropertyName = "module";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.BindingByModuleName.ModulePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.BindingByModuleName.ModulePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.Module)(element)).ModuleName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.Module"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.Module"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.Module();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Module"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Module"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Module this[int index]
        {
            get
            {
                return ((global::LoggerConfig.Module)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Module"/> with the specified key.
        /// </summary>
        /// <param name="moduleName">The key of the <see cref="global::LoggerConfig.Module"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Module this[object moduleName]
        {
            get
            {
                return ((global::LoggerConfig.Module)(base.BaseGet(moduleName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.Module"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="module">The <see cref="global::LoggerConfig.Module"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.Module module)
        {
            base.BaseAdd(module);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.Module"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="module">The <see cref="global::LoggerConfig.Module"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.Module module)
        {
            base.BaseRemove(this.GetElementKey(module));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Module"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Module"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Module GetItemAt(int index)
        {
            return ((global::LoggerConfig.Module)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Module"/> with the specified key.
        /// </summary>
        /// <param name="moduleName">The key of the <see cref="global::LoggerConfig.Module"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Module GetItemByKey(string moduleName)
        {
            return ((global::LoggerConfig.Module)(base.BaseGet(((object)(moduleName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of Logger instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.Logger), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.Module.LoggerPropertyName)]
    internal partial class Module : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.Logger"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerPropertyName = "logger";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.Module.LoggerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.Module.LoggerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.Logger)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.Logger"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.Logger"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.Logger();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[int index]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[object name]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.Logger"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.Logger logger)
        {
            base.BaseAdd(logger);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.Logger"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.Logger logger)
        {
            base.BaseRemove(this.GetElementKey(logger));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemAt(int index)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemByKey(string name)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ModuleName Property
        /// <summary>
        /// The XML name of the <see cref="ModuleName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ModuleNamePropertyName = "moduleName";
        
        /// <summary>
        /// Gets or sets the ModuleName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ModuleName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.Module.ModuleNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ModuleName
        {
            get
            {
                return ((string)(base[global::LoggerConfig.Module.ModuleNamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.Module.ModuleNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The Logger Configuration Element.
    /// </summary>
    internal partial class Logger : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.Logger.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::LoggerConfig.Logger.NamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.Logger.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of Logger instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.Logger), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.FromAll.LoggerPropertyName)]
    internal partial class FromAll : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.Logger"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerPropertyName = "logger";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.FromAll.LoggerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.FromAll.LoggerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.Logger)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.Logger"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.Logger"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.Logger();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[int index]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[object name]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.Logger"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.Logger logger)
        {
            base.BaseAdd(logger);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.Logger"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.Logger logger)
        {
            base.BaseRemove(this.GetElementKey(logger));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemAt(int index)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemByKey(string name)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of Logger instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.Logger), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.FromOthers.LoggerPropertyName)]
    internal partial class FromOthers : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.Logger"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerPropertyName = "logger";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.FromOthers.LoggerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.FromOthers.LoggerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.Logger)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.Logger"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.Logger"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.Logger();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[int index]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[object name]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.Logger"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.Logger logger)
        {
            base.BaseAdd(logger);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.Logger"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.Logger logger)
        {
            base.BaseRemove(this.GetElementKey(logger));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemAt(int index)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemByKey(string name)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The LoggerConfigurationBase Configuration Element.
    /// </summary>
    internal partial class LoggerConfigurationBase : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.LoggerConfigurationBase.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::LoggerConfig.LoggerConfigurationBase.NamePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.LoggerConfigurationBase.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Level Property
        /// <summary>
        /// The XML name of the <see cref="Level"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LevelPropertyName = "level";
        
        /// <summary>
        /// Gets or sets the Level.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Level.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.LoggerConfigurationBase.LevelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.Level Level
        {
            get
            {
                return ((global::LoggerConfig.Level)(base[global::LoggerConfig.LoggerConfigurationBase.LevelPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.LoggerConfigurationBase.LevelPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The GroupLogger Configuration Element.
    /// </summary>
    internal partial class GroupLogger : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Loggers Property
        /// <summary>
        /// The XML name of the <see cref="Loggers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggersPropertyName = "loggers";
        
        /// <summary>
        /// Gets or sets the Loggers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Loggers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.GroupLogger.LoggersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.Loggers Loggers
        {
            get
            {
                return ((global::LoggerConfig.Loggers)(base[global::LoggerConfig.GroupLogger.LoggersPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.GroupLogger.LoggersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// A collection of Logger instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::LoggerConfig.Logger), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::LoggerConfig.Loggers.LoggerPropertyName)]
    internal partial class Loggers : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::LoggerConfig.Logger"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerPropertyName = "logger";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::LoggerConfig.Loggers.LoggerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::LoggerConfig.Loggers.LoggerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::LoggerConfig.Logger)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::LoggerConfig.Logger"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::LoggerConfig.Logger"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::LoggerConfig.Logger();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[int index]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger this[object name]
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::LoggerConfig.Logger"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::LoggerConfig.Logger logger)
        {
            base.BaseAdd(logger);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::LoggerConfig.Logger"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="logger">The <see cref="global::LoggerConfig.Logger"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::LoggerConfig.Logger logger)
        {
            base.BaseRemove(this.GetElementKey(logger));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemAt(int index)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::LoggerConfig.Logger"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::LoggerConfig.Logger"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::LoggerConfig.Logger GetItemByKey(string name)
        {
            return ((global::LoggerConfig.Logger)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The AsyncQueue Configuration Element.
    /// </summary>
    internal partial class AsyncQueue : global::LoggerConfig.LoggerConfigurationBase
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region QueueSize Property
        /// <summary>
        /// The XML name of the <see cref="QueueSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string QueueSizePropertyName = "queueSize";
        
        /// <summary>
        /// Gets or sets the QueueSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The QueueSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueue.QueueSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=200)]
        public virtual int QueueSize
        {
            get
            {
                return ((int)(base[global::LoggerConfig.AsyncQueue.QueueSizePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueue.QueueSizePropertyName] = value;
            }
        }
        #endregion
        
        #region IsDiscardExcess Property
        /// <summary>
        /// The XML name of the <see cref="IsDiscardExcess"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IsDiscardExcessPropertyName = "isDiscardExcess";
        
        /// <summary>
        /// Gets or sets the IsDiscardExcess.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsDiscardExcess.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueue.IsDiscardExcessPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool IsDiscardExcess
        {
            get
            {
                return ((bool)(base[global::LoggerConfig.AsyncQueue.IsDiscardExcessPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueue.IsDiscardExcessPropertyName] = value;
            }
        }
        #endregion
        
        #region IsRepeatLoggingIfErrors Property
        /// <summary>
        /// The XML name of the <see cref="IsRepeatLoggingIfErrors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IsRepeatLoggingIfErrorsPropertyName = "isRepeatLoggingIfErrors";
        
        /// <summary>
        /// Gets or sets the IsRepeatLoggingIfErrors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsRepeatLoggingIfErrors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueue.IsRepeatLoggingIfErrorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool IsRepeatLoggingIfErrors
        {
            get
            {
                return ((bool)(base[global::LoggerConfig.AsyncQueue.IsRepeatLoggingIfErrorsPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueue.IsRepeatLoggingIfErrorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Logger Property
        /// <summary>
        /// The XML name of the <see cref="Logger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoggerPropertyName = "logger";
        
        /// <summary>
        /// Gets or sets the Logger.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Logger.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueue.LoggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::LoggerConfig.Logger Logger
        {
            get
            {
                return ((global::LoggerConfig.Logger)(base[global::LoggerConfig.AsyncQueue.LoggerPropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueue.LoggerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// The AsyncQueueWithReliableSending Configuration Element.
    /// </summary>
    internal partial class AsyncQueueWithReliableSending : global::LoggerConfig.AsyncQueue
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region FolderNameOfTemporaryStore Property
        /// <summary>
        /// The XML name of the <see cref="FolderNameOfTemporaryStore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FolderNameOfTemporaryStorePropertyName = "folderNameOfTemporaryStore";
        
        /// <summary>
        /// Gets or sets the FolderNameOfTemporaryStore.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FolderNameOfTemporaryStore.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueueWithReliableSending.FolderNameOfTemporaryStorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string FolderNameOfTemporaryStore
        {
            get
            {
                return ((string)(base[global::LoggerConfig.AsyncQueueWithReliableSending.FolderNameOfTemporaryStorePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueueWithReliableSending.FolderNameOfTemporaryStorePropertyName] = value;
            }
        }
        #endregion
        
        #region MaxFileSize Property
        /// <summary>
        /// The XML name of the <see cref="MaxFileSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MaxFileSizePropertyName = "maxFileSize";
        
        /// <summary>
        /// Gets or sets the MaxFileSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxFileSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::LoggerConfig.AsyncQueueWithReliableSending.MaxFileSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=10485760L)]
        public virtual long MaxFileSize
        {
            get
            {
                return ((long)(base[global::LoggerConfig.AsyncQueueWithReliableSending.MaxFileSizePropertyName]));
            }
            set
            {
                base[global::LoggerConfig.AsyncQueueWithReliableSending.MaxFileSizePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// Level.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum Level
    {
        
        /// <summary>
        /// TRACE.
        /// </summary>
        TRACE = 0,
        
        /// <summary>
        /// DEBUG.
        /// </summary>
        DEBUG = 1,
        
        /// <summary>
        /// INFO.
        /// </summary>
        INFO = 2,
        
        /// <summary>
        /// WARN.
        /// </summary>
        WARN = 3,
        
        /// <summary>
        /// ERROR.
        /// </summary>
        ERROR = 4,
        
        /// <summary>
        /// FATAL.
        /// </summary>
        FATAL = 5,
    }
}
namespace LoggerConfig
{
    
    
    /// <summary>
    /// ConfigurationType.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum ConfigurationType
    {
        
        /// <summary>
        /// ConsoleLoggerConfiguration.
        /// </summary>
        ConsoleLoggerConfiguration,
        
        /// <summary>
        /// FileLoggerConfiguration.
        /// </summary>
        FileLoggerConfiguration,
        
        /// <summary>
        /// DBLoggerConfiguration.
        /// </summary>
        DBLoggerConfiguration,
        
        /// <summary>
        /// PipeLoggerConfiguration.
        /// </summary>
        PipeLoggerConfiguration,
        
        /// <summary>
        /// NetLoggerConfiguration.
        /// </summary>
        NetLoggerConfiguration,
        
        /// <summary>
        /// RoutingLoggerConfiguration.
        /// </summary>
        RoutingLoggerConfiguration,
    }
}
